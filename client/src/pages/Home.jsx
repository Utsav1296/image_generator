import React, { useState, useEffect } from 'react'
import { Loader, Card, FormField } from '../components'

const RenderCards = ({ data, title }) => {
   if (data?.length > 0) {
      return data?.map((post) => <Card key={post._id} {...post} />)
   }
   return (
      <h2 className="mt-5 font-bold text-[#6449ff] dark:text-zinc-300 text-xl uppercase">{title}</h2>
   )
}

const Home = () => {
   const [loading, setLoading] = useState(false)
   const [allPosts, setAllPosts] = useState(null)
   const [searchText, setSearchText] = useState('')
   const [searchedResults, setSearchedResults] = useState(null)
   const [searchTimeout, setSearchTimeout] = useState(null)

   useEffect(() => {
      const fetchPosts = async () => {
         setLoading(true)

         try {
            const response = await fetch('https://genimaze.onrender.com/api/v1/post', {
               method: 'GET',
               headers: {
                  'Content-Type': 'application/json',
               },
            })

            if (response.ok) {
               const result = await response.json()

               setAllPosts(result.data.reverse())
            }
         } catch (error) {
            alert(`Error : ${error}`)
         } finally {
            setLoading(false)
         }
      }
      fetchPosts()
   }, [])

   const handleSearchChange = (e) => {
      clearTimeout(searchTimeout)

      setSearchText(e.target.value);

      // setting a debounce so that it doesn't filter out at every keystroke, we can do by setting timeout
      setSearchTimeout(
         setTimeout(() => {
            const searchResults = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase())
            )

            setSearchedResults(searchResults)
         }, 500)
      )
   }

   return (
      <section className='max-w-7xl mx-auto'>
         <div>
            <h1 className="font-extrabold text-[#222328] dark:text-[#dddcd7] text-[32px] capitalize">The community showcase</h1>
            <p className='mt-2 text-[#666e75] max-w-[500px]'>Browse through a collection of imaginative and visually stunning images , generated by DALL-E-AI</p>
         </div>

         <div className="mt-16">
            <FormField
               labelName="Search Posts"
               type="text"
               name="text"
               placeholder='Search posts'
               value={searchText}
               handleChange={handleSearchChange}
            />
         </div>

         <div className="mt-10">
            {/* searchBar */}
            {loading ? (
               <div className="flex justify-center items-center">
                  <Loader />
               </div>) : (
               <>
                  {searchText && (
                     <h2 className='font-medium text-[#666ee75] dark:text-gray-400 text-xl mb-3'>Showing results for <span className='text-[#222328] dark:text-gray-200'>{searchText}</span></h2>
                  )}

                  {/* image  */}
                  <div className="grid grid-cols-1 gap-3 xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4">
                     {searchText ? (
                        <RenderCards
                           data={searchedResults}
                           title={['No search result found']}
                        />) : (
                        <RenderCards
                           data={allPosts}
                           title={'No post found here'}
                        />
                     )}
                  </div>
               </>
            )}

         </div>
      </section >
   )
}

export default Home